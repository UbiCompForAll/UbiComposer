/**
 * UbiCompForAll
 */
package org.ubicompforall.descriptor.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.ubicompforall.descriptor.util.UbiCompDescriptorAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UbiCompDescriptorItemProviderAdapterFactory extends UbiCompDescriptorAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UbiCompDescriptorItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.DescriptorLibrary} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DescriptorLibraryItemProvider descriptorLibraryItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.DescriptorLibrary}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDescriptorLibraryAdapter() {
		if (descriptorLibraryItemProvider == null) {
			descriptorLibraryItemProvider = new DescriptorLibraryItemProvider(this);
		}

		return descriptorLibraryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.TriggerDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerDescItemProvider triggerDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.TriggerDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerDescAdapter() {
		if (triggerDescItemProvider == null) {
			triggerDescItemProvider = new TriggerDescItemProvider(this);
		}

		return triggerDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.ConditionDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionDescItemProvider conditionDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.ConditionDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionDescAdapter() {
		if (conditionDescItemProvider == null) {
			conditionDescItemProvider = new ConditionDescItemProvider(this);
		}

		return conditionDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.ConditionalStepDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ConditionalStepDescItemProvider conditionalStepDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.ConditionalStepDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createConditionalStepDescAdapter() {
		if (conditionalStepDescItemProvider == null) {
			conditionalStepDescItemProvider = new ConditionalStepDescItemProvider(this);
		}

		return conditionalStepDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.DomainObjectDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DomainObjectDescItemProvider domainObjectDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.DomainObjectDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDomainObjectDescAdapter() {
		if (domainObjectDescItemProvider == null) {
			domainObjectDescItemProvider = new DomainObjectDescItemProvider(this);
		}

		return domainObjectDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.QueryDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QueryDescItemProvider queryDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.QueryDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQueryDescAdapter() {
		if (queryDescItemProvider == null) {
			queryDescItemProvider = new QueryDescItemProvider(this);
		}

		return queryDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropertyItemProvider propertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropertyAdapter() {
		if (propertyItemProvider == null) {
			propertyItemProvider = new PropertyItemProvider(this);
		}

		return propertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.Value} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValueItemProvider valueItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.Value}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValueAdapter() {
		if (valueItemProvider == null) {
			valueItemProvider = new ValueItemProvider(this);
		}

		return valueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.StepDesc} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StepDescItemProvider stepDescItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.StepDesc}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStepDescAdapter() {
		if (stepDescItemProvider == null) {
			stepDescItemProvider = new StepDescItemProvider(this);
		}

		return stepDescItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.NamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementItemProvider namedElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.NamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedElementAdapter() {
		if (namedElementItemProvider == null) {
			namedElementItemProvider = new NamedElementItemProvider(this);
		}

		return namedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.ubicompforall.descriptor.DataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DataTypeItemProvider dataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link org.ubicompforall.descriptor.DataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDataTypeAdapter() {
		if (dataTypeItemProvider == null) {
			dataTypeItemProvider = new DataTypeItemProvider(this);
		}

		return dataTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (descriptorLibraryItemProvider != null) descriptorLibraryItemProvider.dispose();
		if (triggerDescItemProvider != null) triggerDescItemProvider.dispose();
		if (conditionDescItemProvider != null) conditionDescItemProvider.dispose();
		if (conditionalStepDescItemProvider != null) conditionalStepDescItemProvider.dispose();
		if (domainObjectDescItemProvider != null) domainObjectDescItemProvider.dispose();
		if (queryDescItemProvider != null) queryDescItemProvider.dispose();
		if (propertyItemProvider != null) propertyItemProvider.dispose();
		if (valueItemProvider != null) valueItemProvider.dispose();
		if (stepDescItemProvider != null) stepDescItemProvider.dispose();
		if (namedElementItemProvider != null) namedElementItemProvider.dispose();
		if (dataTypeItemProvider != null) dataTypeItemProvider.dispose();
	}

}
